Error: Unsupported features in 2 methods
Detailed message:
Error: com.oracle.graal.pointsto.constraints.UnsupportedFeatureException: Detected a direct/mapped ByteBuffer in the image heap. A direct ByteBuffer has a pointer to unmanaged C memory, and C memory from the image generator is not available at image runtime.A mapped ByteBuffer references a file descriptor, which is no longer open and mapped at run time.   Object has been initialized through the following trace:
        at java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:114)
        at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:317)
        at sun.nio.ch.Util.getTemporaryDirectBuffer(Util.java:242)
        at sun.nio.ch.IOUtil.write(IOUtil.java:71)
        at sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:280)
        at java.nio.channels.Channels.writeFullyImpl(Channels.java:74)
        at java.nio.channels.Channels.writeFully(Channels.java:97)
        at java.nio.channels.Channels$1.write(Channels.java:172)
        at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:233)
        at sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:303)
        at sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:281)
        at sun.nio.cs.StreamEncoder.write(StreamEncoder.java:125)
        at java.io.OutputStreamWriter.write(OutputStreamWriter.java:208)
        at java.io.BufferedWriter.flushBuffer(BufferedWriter.java:120)
        at java.io.BufferedWriter.close(BufferedWriter.java:268)
        at com.oracle.svm.hosted.c.codegen.CSourceCodeWriter.writeFile(CSourceCodeWriter.java:184)
        at com.oracle.svm.hosted.c.codegen.QueryCodeWriter.write(QueryCodeWriter.java:94)
        at com.oracle.svm.hosted.c.CAnnotationProcessor.process(CAnnotationProcessor.java:101)
        at com.oracle.svm.hosted.c.NativeLibraries.finish(NativeLibraries.java:549)
        at com.oracle.svm.hosted.NativeImageGenerator.processNativeLibraryImports(NativeImageGenerator.java:1584)
        at com.oracle.svm.hosted.NativeImageGenerator.setupNativeLibraries(NativeImageGenerator.java:1064)
        at com.oracle.svm.hosted.NativeImageGenerator.setupNativeImage(NativeImageGenerator.java:882)
        at com.oracle.svm.hosted.NativeImageGenerator.doRun(NativeImageGenerator.java:561)
        at com.oracle.svm.hosted.NativeImageGenerator.lambda$run$0(NativeImageGenerator.java:476)
        at com.oracle.svm.hosted.NativeImageGenerator$$Lambda$123/0x00000007c08eb440.run(Unknown Source)
        at java.util.concurrent.ForkJoinTask$AdaptedRunnableAction.exec(ForkJoinTask.java:1407)
        at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290)
        at java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1020)
        at java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1656)
        at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1594)
        at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)
. Try avoiding to initialize the class that caused initialization of the MappedByteBuffer. The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image runtime by using the option --initialize-at-run-time=<class-name>. Or you can write your own initialization methods and call them explicitly from your main entry point.
Trace:
        at parsing org.h2.store.fs.FileNioMemData.changeLength(FilePathNioMem.java:685)
Call path from entry point to org.h2.store.fs.FileNioMemData.changeLength(long):
        at org.h2.store.fs.FileNioMemData.changeLength(FilePathNioMem.java:677)
        at org.h2.store.fs.FileNioMemData.readWrite(FilePathNioMem.java:712)
        at org.h2.store.fs.FileNioMem.write(FilePathNioMem.java:324)
        at org.h2.store.fs.FileUtils.writeFully(FileUtils.java:372)
        at org.h2.store.fs.FileChannelOutputStream.write(FileChannelOutputStream.java:51)
        at java.util.zip.DeflaterOutputStream.flush(DeflaterOutputStream.java:277)
        at java.io.PrintStream.flush(PrintStream.java:417)
        at com.oracle.svm.jni.functions.JNIFunctions.ExceptionDescribe(JNIFunctions.java:763)
        at com.oracle.svm.core.code.IsolateEnterStub.JNIFunctions_ExceptionDescribe_b5412f7570bccae90b000bc37855f00408b2ad73(generated:0)
Error: com.oracle.graal.pointsto.constraints.UnsupportedFeatureException: Detected a direct/mapped ByteBuffer in the image heap. A direct ByteBuffer has a pointer to unmanaged C memory, and C memory from the image generator is not available at image runtime.A mapped ByteBuffer references a file descriptor, which is no longer open and mapped at run time.   Object has been initialized through the following trace:
        at java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:114)
        at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:317)
        at sun.nio.ch.Util.getTemporaryDirectBuffer(Util.java:242)
        at sun.nio.ch.IOUtil.write(IOUtil.java:71)
        at sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:280)
        at java.nio.channels.Channels.writeFullyImpl(Channels.java:74)
        at java.nio.channels.Channels.writeFully(Channels.java:97)
        at java.nio.channels.Channels$1.write(Channels.java:172)
        at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:233)
        at sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:303)
        at sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:281)
        at sun.nio.cs.StreamEncoder.write(StreamEncoder.java:125)
        at java.io.OutputStreamWriter.write(OutputStreamWriter.java:208)
        at java.io.BufferedWriter.flushBuffer(BufferedWriter.java:120)
        at java.io.BufferedWriter.close(BufferedWriter.java:268)
        at com.oracle.svm.hosted.c.codegen.CSourceCodeWriter.writeFile(CSourceCodeWriter.java:184)
        at com.oracle.svm.hosted.c.codegen.QueryCodeWriter.write(QueryCodeWriter.java:94)
        at com.oracle.svm.hosted.c.CAnnotationProcessor.process(CAnnotationProcessor.java:101)
        at com.oracle.svm.hosted.c.NativeLibraries.finish(NativeLibraries.java:549)
        at com.oracle.svm.hosted.NativeImageGenerator.processNativeLibraryImports(NativeImageGenerator.java:1584)
        at com.oracle.svm.hosted.NativeImageGenerator.setupNativeLibraries(NativeImageGenerator.java:1064)
        at com.oracle.svm.hosted.NativeImageGenerator.setupNativeImage(NativeImageGenerator.java:882)
        at com.oracle.svm.hosted.NativeImageGenerator.doRun(NativeImageGenerator.java:561)
        at com.oracle.svm.hosted.NativeImageGenerator.lambda$run$0(NativeImageGenerator.java:476)
        at com.oracle.svm.hosted.NativeImageGenerator$$Lambda$123/0x00000007c08eb440.run(Unknown Source)
        at java.util.concurrent.ForkJoinTask$AdaptedRunnableAction.exec(ForkJoinTask.java:1407)
        at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290)
        at java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1020)
        at java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1656)
        at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1594)
        at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)
. Try avoiding to initialize the class that caused initialization of the MappedByteBuffer. The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image runtime by using the option --initialize-at-run-time=<class-name>. Or you can write your own initialization methods and call them explicitly from your main entry point.
Trace:
        at parsing org.h2.store.fs.FileNioMemData.expandPage(FilePathNioMem.java:600)
Call path from entry point to org.h2.store.fs.FileNioMemData.expandPage(int):
        at org.h2.store.fs.FileNioMemData.expandPage(FilePathNioMem.java:590)
        at org.h2.store.fs.FileNioMemData.readWrite(FilePathNioMem.java:720)
        at org.h2.store.fs.FileNioMem.write(FilePathNioMem.java:324)
        at org.h2.store.fs.FileUtils.writeFully(FileUtils.java:372)
        at org.h2.store.fs.FileChannelOutputStream.write(FileChannelOutputStream.java:51)
        at java.util.zip.DeflaterOutputStream.flush(DeflaterOutputStream.java:277)
        at java.io.PrintStream.flush(PrintStream.java:417)
        at com.oracle.svm.jni.functions.JNIFunctions.ExceptionDescribe(JNIFunctions.java:763)
        at com.oracle.svm.core.code.IsolateEnterStub.JNIFunctions_ExceptionDescribe_b5412f7570bccae90b000bc37855f00408b2ad73(generated:0)

com.oracle.svm.core.util.UserError$UserException: Unsupported features in 2 methods
Detailed message:
Error: com.oracle.graal.pointsto.constraints.UnsupportedFeatureException: Detected a direct/mapped ByteBuffer in the image heap. A direct ByteBuffer has a pointer to unmanaged C memory, and C memory from the image generator is not available at image runtime.A mapped ByteBuffer references a file descriptor, which is no longer open and mapped at run time.   Object has been initialized through the following trace:
        at java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:114)
        at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:317)
        at sun.nio.ch.Util.getTemporaryDirectBuffer(Util.java:242)
        at sun.nio.ch.IOUtil.write(IOUtil.java:71)
        at sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:280)
        at java.nio.channels.Channels.writeFullyImpl(Channels.java:74)
        at java.nio.channels.Channels.writeFully(Channels.java:97)
        at java.nio.channels.Channels$1.write(Channels.java:172)
        at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:233)
        at sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:303)
        at sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:281)
        at sun.nio.cs.StreamEncoder.write(StreamEncoder.java:125)
        at java.io.OutputStreamWriter.write(OutputStreamWriter.java:208)
        at java.io.BufferedWriter.flushBuffer(BufferedWriter.java:120)
        at java.io.BufferedWriter.close(BufferedWriter.java:268)
        at com.oracle.svm.hosted.c.codegen.CSourceCodeWriter.writeFile(CSourceCodeWriter.java:184)
        at com.oracle.svm.hosted.c.codegen.QueryCodeWriter.write(QueryCodeWriter.java:94)
        at com.oracle.svm.hosted.c.CAnnotationProcessor.process(CAnnotationProcessor.java:101)
        at com.oracle.svm.hosted.c.NativeLibraries.finish(NativeLibraries.java:549)
        at com.oracle.svm.hosted.NativeImageGenerator.processNativeLibraryImports(NativeImageGenerator.java:1584)
        at com.oracle.svm.hosted.NativeImageGenerator.setupNativeLibraries(NativeImageGenerator.java:1064)
        at com.oracle.svm.hosted.NativeImageGenerator.setupNativeImage(NativeImageGenerator.java:882)
        at com.oracle.svm.hosted.NativeImageGenerator.doRun(NativeImageGenerator.java:561)
        at com.oracle.svm.hosted.NativeImageGenerator.lambda$run$0(NativeImageGenerator.java:476)
        at com.oracle.svm.hosted.NativeImageGenerator$$Lambda$123/0x00000007c08eb440.run(Unknown Source)
        at java.util.concurrent.ForkJoinTask$AdaptedRunnableAction.exec(ForkJoinTask.java:1407)
        at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290)
        at java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1020)
        at java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1656)
        at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1594)
        at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)
. Try avoiding to initialize the class that caused initialization of the MappedByteBuffer. The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image runtime by using the option --initialize-at-run-time=<class-name>. Or you can write your own initialization methods and call them explicitly from your main entry point.
Trace:
        at parsing org.h2.store.fs.FileNioMemData.changeLength(FilePathNioMem.java:685)
Call path from entry point to org.h2.store.fs.FileNioMemData.changeLength(long):
        at org.h2.store.fs.FileNioMemData.changeLength(FilePathNioMem.java:677)
        at org.h2.store.fs.FileNioMemData.readWrite(FilePathNioMem.java:712)
        at org.h2.store.fs.FileNioMem.write(FilePathNioMem.java:324)
        at org.h2.store.fs.FileUtils.writeFully(FileUtils.java:372)
        at org.h2.store.fs.FileChannelOutputStream.write(FileChannelOutputStream.java:51)
        at java.util.zip.DeflaterOutputStream.flush(DeflaterOutputStream.java:277)
        at java.io.PrintStream.flush(PrintStream.java:417)
        at com.oracle.svm.jni.functions.JNIFunctions.ExceptionDescribe(JNIFunctions.java:763)
        at com.oracle.svm.core.code.IsolateEnterStub.JNIFunctions_ExceptionDescribe_b5412f7570bccae90b000bc37855f00408b2ad73(generated:0)
Error: com.oracle.graal.pointsto.constraints.UnsupportedFeatureException: Detected a direct/mapped ByteBuffer in the image heap. A direct ByteBuffer has a pointer to unmanaged C memory, and C memory from the image generator is not available at image runtime.A mapped ByteBuffer references a file descriptor, which is no longer open and mapped at run time.   Object has been initialized through the following trace:
        at java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:114)
        at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:317)
        at sun.nio.ch.Util.getTemporaryDirectBuffer(Util.java:242)
        at sun.nio.ch.IOUtil.write(IOUtil.java:71)
        at sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:280)
        at java.nio.channels.Channels.writeFullyImpl(Channels.java:74)
        at java.nio.channels.Channels.writeFully(Channels.java:97)
        at java.nio.channels.Channels$1.write(Channels.java:172)
        at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:233)
        at sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:303)
        at sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:281)
        at sun.nio.cs.StreamEncoder.write(StreamEncoder.java:125)
        at java.io.OutputStreamWriter.write(OutputStreamWriter.java:208)
        at java.io.BufferedWriter.flushBuffer(BufferedWriter.java:120)
        at java.io.BufferedWriter.close(BufferedWriter.java:268)
        at com.oracle.svm.hosted.c.codegen.CSourceCodeWriter.writeFile(CSourceCodeWriter.java:184)
        at com.oracle.svm.hosted.c.codegen.QueryCodeWriter.write(QueryCodeWriter.java:94)
        at com.oracle.svm.hosted.c.CAnnotationProcessor.process(CAnnotationProcessor.java:101)
        at com.oracle.svm.hosted.c.NativeLibraries.finish(NativeLibraries.java:549)
        at com.oracle.svm.hosted.NativeImageGenerator.processNativeLibraryImports(NativeImageGenerator.java:1584)
        at com.oracle.svm.hosted.NativeImageGenerator.setupNativeLibraries(NativeImageGenerator.java:1064)
        at com.oracle.svm.hosted.NativeImageGenerator.setupNativeImage(NativeImageGenerator.java:882)
        at com.oracle.svm.hosted.NativeImageGenerator.doRun(NativeImageGenerator.java:561)
        at com.oracle.svm.hosted.NativeImageGenerator.lambda$run$0(NativeImageGenerator.java:476)
        at com.oracle.svm.hosted.NativeImageGenerator$$Lambda$123/0x00000007c08eb440.run(Unknown Source)
        at java.util.concurrent.ForkJoinTask$AdaptedRunnableAction.exec(ForkJoinTask.java:1407)
        at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290)
        at java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1020)
        at java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1656)
        at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1594)
        at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)
. Try avoiding to initialize the class that caused initialization of the MappedByteBuffer. The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image runtime by using the option --initialize-at-run-time=<class-name>. Or you can write your own initialization methods and call them explicitly from your main entry point.
Trace:
        at parsing org.h2.store.fs.FileNioMemData.expandPage(FilePathNioMem.java:600)
Call path from entry point to org.h2.store.fs.FileNioMemData.expandPage(int):
        at org.h2.store.fs.FileNioMemData.expandPage(FilePathNioMem.java:590)
        at org.h2.store.fs.FileNioMemData.readWrite(FilePathNioMem.java:720)
        at org.h2.store.fs.FileNioMem.write(FilePathNioMem.java:324)
        at org.h2.store.fs.FileUtils.writeFully(FileUtils.java:372)
        at org.h2.store.fs.FileChannelOutputStream.write(FileChannelOutputStream.java:51)
        at java.util.zip.DeflaterOutputStream.flush(DeflaterOutputStream.java:277)
        at java.io.PrintStream.flush(PrintStream.java:417)
        at com.oracle.svm.jni.functions.JNIFunctions.ExceptionDescribe(JNIFunctions.java:763)
        at com.oracle.svm.core.code.IsolateEnterStub.JNIFunctions_ExceptionDescribe_b5412f7570bccae90b000bc37855f00408b2ad73(generated:0)

        at com.oracle.svm.core.util.UserError.abort(UserError.java:82)
        at com.oracle.svm.hosted.FallbackFeature.reportAsFallback(FallbackFeature.java:233)
        at com.oracle.svm.hosted.NativeImageGenerator.runPointsToAnalysis(NativeImageGenerator.java:773)
        at com.oracle.svm.hosted.NativeImageGenerator.doRun(NativeImageGenerator.java:563)
        at com.oracle.svm.hosted.NativeImageGenerator.lambda$run$0(NativeImageGenerator.java:476)
        at java.base/java.util.concurrent.ForkJoinTask$AdaptedRunnableAction.exec(ForkJoinTask.java:1407)
        at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290)
        at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1020)
        at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1656)
        at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1594)
        at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)
Caused by: com.oracle.graal.pointsto.constraints.UnsupportedFeatureException: Unsupported features in 2 methods
Detailed message:
Error: com.oracle.graal.pointsto.constraints.UnsupportedFeatureException: Detected a direct/mapped ByteBuffer in the image heap. A direct ByteBuffer has a pointer to unmanaged C memory, and C memory from the image generator is not available at image runtime.A mapped ByteBuffer references a file descriptor, which is no longer open and mapped at run time.   Object has been initialized through the following trace:
        at java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:114)
        at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:317)
        at sun.nio.ch.Util.getTemporaryDirectBuffer(Util.java:242)
        at sun.nio.ch.IOUtil.write(IOUtil.java:71)
        at sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:280)
        at java.nio.channels.Channels.writeFullyImpl(Channels.java:74)
        at java.nio.channels.Channels.writeFully(Channels.java:97)
        at java.nio.channels.Channels$1.write(Channels.java:172)
        at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:233)
        at sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:303)
        at sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:281)
        at sun.nio.cs.StreamEncoder.write(StreamEncoder.java:125)
        at java.io.OutputStreamWriter.write(OutputStreamWriter.java:208)
        at java.io.BufferedWriter.flushBuffer(BufferedWriter.java:120)
        at java.io.BufferedWriter.close(BufferedWriter.java:268)
        at com.oracle.svm.hosted.c.codegen.CSourceCodeWriter.writeFile(CSourceCodeWriter.java:184)
        at com.oracle.svm.hosted.c.codegen.QueryCodeWriter.write(QueryCodeWriter.java:94)
        at com.oracle.svm.hosted.c.CAnnotationProcessor.process(CAnnotationProcessor.java:101)
        at com.oracle.svm.hosted.c.NativeLibraries.finish(NativeLibraries.java:549)
        at com.oracle.svm.hosted.NativeImageGenerator.processNativeLibraryImports(NativeImageGenerator.java:1584)
        at com.oracle.svm.hosted.NativeImageGenerator.setupNativeLibraries(NativeImageGenerator.java:1064)
        at com.oracle.svm.hosted.NativeImageGenerator.setupNativeImage(NativeImageGenerator.java:882)
        at com.oracle.svm.hosted.NativeImageGenerator.doRun(NativeImageGenerator.java:561)
        at com.oracle.svm.hosted.NativeImageGenerator.lambda$run$0(NativeImageGenerator.java:476)
        at com.oracle.svm.hosted.NativeImageGenerator$$Lambda$123/0x00000007c08eb440.run(Unknown Source)
        at java.util.concurrent.ForkJoinTask$AdaptedRunnableAction.exec(ForkJoinTask.java:1407)
        at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290)
        at java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1020)
        at java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1656)
        at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1594)
        at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)
. Try avoiding to initialize the class that caused initialization of the MappedByteBuffer. The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image runtime by using the option --initialize-at-run-time=<class-name>. Or you can write your own initialization methods and call them explicitly from your main entry point.
Trace:
        at parsing org.h2.store.fs.FileNioMemData.changeLength(FilePathNioMem.java:685)
Call path from entry point to org.h2.store.fs.FileNioMemData.changeLength(long):
        at org.h2.store.fs.FileNioMemData.changeLength(FilePathNioMem.java:677)
        at org.h2.store.fs.FileNioMemData.readWrite(FilePathNioMem.java:712)
        at org.h2.store.fs.FileNioMem.write(FilePathNioMem.java:324)
        at org.h2.store.fs.FileUtils.writeFully(FileUtils.java:372)
        at org.h2.store.fs.FileChannelOutputStream.write(FileChannelOutputStream.java:51)
        at java.util.zip.DeflaterOutputStream.flush(DeflaterOutputStream.java:277)
        at java.io.PrintStream.flush(PrintStream.java:417)
        at com.oracle.svm.jni.functions.JNIFunctions.ExceptionDescribe(JNIFunctions.java:763)
        at com.oracle.svm.core.code.IsolateEnterStub.JNIFunctions_ExceptionDescribe_b5412f7570bccae90b000bc37855f00408b2ad73(generated:0)
Error: com.oracle.graal.pointsto.constraints.UnsupportedFeatureException: Detected a direct/mapped ByteBuffer in the image heap. A direct ByteBuffer has a pointer to unmanaged C memory, and C memory from the image generator is not available at image runtime.A mapped ByteBuffer references a file descriptor, which is no longer open and mapped at run time.   Object has been initialized through the following trace:
        at java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:114)
        at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:317)
        at sun.nio.ch.Util.getTemporaryDirectBuffer(Util.java:242)
        at sun.nio.ch.IOUtil.write(IOUtil.java:71)
        at sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:280)
        at java.nio.channels.Channels.writeFullyImpl(Channels.java:74)
        at java.nio.channels.Channels.writeFully(Channels.java:97)
        at java.nio.channels.Channels$1.write(Channels.java:172)
        at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:233)
        at sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:303)
        at sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:281)
        at sun.nio.cs.StreamEncoder.write(StreamEncoder.java:125)
        at java.io.OutputStreamWriter.write(OutputStreamWriter.java:208)
        at java.io.BufferedWriter.flushBuffer(BufferedWriter.java:120)
        at java.io.BufferedWriter.close(BufferedWriter.java:268)
        at com.oracle.svm.hosted.c.codegen.CSourceCodeWriter.writeFile(CSourceCodeWriter.java:184)
        at com.oracle.svm.hosted.c.codegen.QueryCodeWriter.write(QueryCodeWriter.java:94)
        at com.oracle.svm.hosted.c.CAnnotationProcessor.process(CAnnotationProcessor.java:101)
        at com.oracle.svm.hosted.c.NativeLibraries.finish(NativeLibraries.java:549)
        at com.oracle.svm.hosted.NativeImageGenerator.processNativeLibraryImports(NativeImageGenerator.java:1584)
        at com.oracle.svm.hosted.NativeImageGenerator.setupNativeLibraries(NativeImageGenerator.java:1064)
        at com.oracle.svm.hosted.NativeImageGenerator.setupNativeImage(NativeImageGenerator.java:882)
        at com.oracle.svm.hosted.NativeImageGenerator.doRun(NativeImageGenerator.java:561)
        at com.oracle.svm.hosted.NativeImageGenerator.lambda$run$0(NativeImageGenerator.java:476)
        at com.oracle.svm.hosted.NativeImageGenerator$$Lambda$123/0x00000007c08eb440.run(Unknown Source)
        at java.util.concurrent.ForkJoinTask$AdaptedRunnableAction.exec(ForkJoinTask.java:1407)
        at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290)
        at java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1020)
        at java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1656)
        at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1594)
        at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)
. Try avoiding to initialize the class that caused initialization of the MappedByteBuffer. The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image runtime by using the option --initialize-at-run-time=<class-name>. Or you can write your own initialization methods and call them explicitly from your main entry point.
Trace:
        at parsing org.h2.store.fs.FileNioMemData.expandPage(FilePathNioMem.java:600)
Call path from entry point to org.h2.store.fs.FileNioMemData.expandPage(int):
        at org.h2.store.fs.FileNioMemData.expandPage(FilePathNioMem.java:590)
        at org.h2.store.fs.FileNioMemData.readWrite(FilePathNioMem.java:720)
        at org.h2.store.fs.FileNioMem.write(FilePathNioMem.java:324)
        at org.h2.store.fs.FileUtils.writeFully(FileUtils.java:372)
        at org.h2.store.fs.FileChannelOutputStream.write(FileChannelOutputStream.java:51)
        at java.util.zip.DeflaterOutputStream.flush(DeflaterOutputStream.java:277)
        at java.io.PrintStream.flush(PrintStream.java:417)
        at com.oracle.svm.jni.functions.JNIFunctions.ExceptionDescribe(JNIFunctions.java:763)
        at com.oracle.svm.core.code.IsolateEnterStub.JNIFunctions_ExceptionDescribe_b5412f7570bccae90b000bc37855f00408b2ad73(generated:0)

        at com.oracle.graal.pointsto.constraints.UnsupportedFeatures.report(UnsupportedFeatures.java:129)
        at com.oracle.svm.hosted.NativeImageGenerator.runPointsToAnalysis(NativeImageGenerator.java:770)
        ... 8 more
Error: Image build request failed with exit status 1
com.oracle.svm.driver.NativeImage$NativeImageError: Image build request failed with exit status 1
        at com.oracle.svm.driver.NativeImage.showError(NativeImage.java:1676)
        at com.oracle.svm.driver.NativeImage.build(NativeImage.java:1426)
        at com.oracle.svm.driver.NativeImage.performBuild(NativeImage.java:1387)
        at com.oracle.svm.driver.NativeImage.main(NativeImage.java:1374)
        at com.oracle.svm.driver.NativeImage$JDK9Plus.main(NativeImage.java:1858)